(* FCL File Created From FFLL Model. Used to know if it is interesting to take the nitro. We use the difficulty  to reach it and the available nitro*)
FUNCTION_BLOCK

VAR_INPUT
	Difficulty	REAL; (* RANGE(0 .. 10) *) 
	Available_nitro	REAL; (* RANGE(0 .. 16) *) 
	Competitiveness	REAL; (* RANGE(0 .. 4)*)
END_VAR

VAR_OUTPUT
	Attraction_value	REAL; (* RANGE(0 .. 10) *) 
END_VAR

FUZZIFY Difficulty
	TERM Easy := (0, 0) (0, 1) (3, 0) ;
	TERM Normal:= (2, 0) (5, 1) (8, 0) ;
	TERM Difficult := (7, 0) (10, 1) (10, 0) ;
END_FUZZIFY

FUZZIFY Available_nitro
	TERM Small := (0, 0) (0, 1) (6, 0) ;
	TERM Medium:= (5, 0) (9, 1) (12, 0) ;
	TERM Large := (11, 0) (16, 1) (16, 0) ;
END_FUZZIFY

FUZZIFY Competitiveness
    TERM Competitive    := 1 ;
    TERM NotCompetitive := 2 ;
END_FUZZIFY

FUZZIFY Attraction_value
	TERM Low := (0, 0) (0, 1) (3, 0) ;
	TERM Normal:= (2, 0) (5, 1) (8, 0) ;
	TERM High := (7, 0) (10, 1) (10, 0) ;
END_FUZZIFY

DEFUZZIFY valve
	METHOD: CoG;
END_DEFUZZIFY

RULEBLOCK first
	AND:MIN;
	ACCUM:MAX;
	RULE 0: IF Easy AND Small AND Competitive THEN High;
	RULE 1: IF Easy AND Medium AND Competitive THEN High;
	RULE 2: IF Easy AND Large AND Competitive  THEN Normal;
	RULE 3: IF Normal AND Small AND Competitive THEN High;
	RULE 4: IF Normal AND Medium AND Competitive  THEN Normal;
	RULE 5: IF Normal AND Large AND Competitive  THEN Low;
	RULE 6: IF Difficult AND Small AND Competitive  THEN Normal;
	RULE 7: IF Difficult AND Medium AND Competitive  THEN Low;
	RULE 8: IF Difficult AND Large  AND Competitive THEN Low;
	RULE 9: IF Easy AND Small AND NotCompetitive THEN Low;
	RULE 10: IF Easy AND Medium AND NotCompetitive THEN Low;
	RULE 11: IF Easy AND Large AND NotCompetitive  THEN Low;
	RULE 12: IF Normal AND Small AND NotCompetitive  THEN Low;
	RULE 13: IF Normal AND MediumAND NotCompetitive  THEN Low;
	RULE 14: IF Normal AND Large AND NotCompetitive  THEN Low;
	RULE 15: IF Difficult AND Small AND NotCompetitive  THEN Low;
	RULE 16: IF Difficult AND Medium AND NotCompetitive  THEN Low;
	RULE 17: IF Difficult AND Large AND NotCompetitive  THEN Low;
END_RULEBLOCK

END_FUNCTION_BLOCK